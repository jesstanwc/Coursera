## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function

makeCacheMatrix <- function(x = matrix()) {  ## define x as a square invertible matrix
        inv <- NULL        
        set <- function(y) { ##set the matrix
                x <<- y
                inv <<- NULL 
        }
        get <- function() x ##get the matrix
        setinv <- function(inverse) inv <<- inverse ##set the inverse of the matrix
        getinv <- function() inv ##get the inverse of the matrix
        list(set=set, get=get, setinv=setinv, getinv=getinv) ##used as the input to cacheSolve()
}


## Write a short comment describing this function
cachesolve <- function(x, ...)  {
        ## Return a matrix that is the inverse of 'x'
        inv <- x$getinv()
        ## if the inverse exist in the cache then get the inverse from the cache
        if(!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        
        ## else calculate the cache
        m.data <- x$get()
        inv <- solve(m.data, ...)
        ## set the value of the inverse in the cache
        x$setinv(inv)
        inv
 }
 
Solution
> mat5x5 <- matrix(sample(1:1000,25), ncol = 5)
> cm5x5 <- makeCacheMatrix(mat5x5)
> cm5x5$get()
     [,1] [,2] [,3] [,4] [,5]
[1,]  616  677  630  737  548
[2,]  796  352  507  865  215
[3,]  277  387  189 1000  546
[4,]  105  153  808  697  818
[5,]  407  889  513   87  957
> cachesolve(cm5x5)
             [,1]         [,2]          [,3]          [,4]          [,5]
[1,] -0.003939259  0.003508617 -1.557521e-04 -1.788655e-04  0.0017092098
[2,]  0.004510772 -0.002832162 -1.695044e-05 -1.106821e-03 -0.0009909653
[3,]  0.002994375 -0.001235777 -1.615099e-03  8.384422e-04 -0.0012322124
[4,]  0.001082881 -0.000658409  8.812208e-04 -4.008946e-05 -0.0009406625
[5,] -0.004218520  0.001861046  8.676485e-04  6.584419e-04  0.0019846211
